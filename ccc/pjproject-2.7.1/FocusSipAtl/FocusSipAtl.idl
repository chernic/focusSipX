// FocusSipAtl.idl : FocusSipAtl 的 IDL 源
// 

// 
// 此文件将由 MIDL 工具处理以
// 产生类型库(FocusSipAtl.tlb)和封送处理代码。

#include "olectl.h"
#include "olectl.h"
import "oaidl.idl";
import "ocidl.idl";
import "focusua_structs.idl";

/// IID_IApp                    ===> IID_IFocusSip
/// LIBID_ACTIVEVIDEOAGENTLib   ===> LIBID_FocusSipAtlLib

[ // ABChernic : IComponentRegistrar
  object,
  uuid(a817e7a2-43fa-11d0-9e44-00aa00b6770a),
  dual,
  helpstring("IComponentRegistrar 接口"),
  pointer_default(unique)
]
interface IComponentRegistrar : IDispatch{
  [id(1)] HRESULT Attach([in] BSTR bstrPath);
  [id(2)] HRESULT RegisterAll();
  [id(3)] HRESULT UnregisterAll();
  [id(4)] HRESULT GetComponents([out] SAFEARRAY(BSTR)* pbstrCLSIDs, [out] SAFEARRAY(BSTR)* pbstrDescriptions);
  [id(5)] HRESULT RegisterComponent([in] BSTR bstrCLSID);
  [id(6)] HRESULT UnregisterComponent([in] BSTR bstrCLSID);
};

[ // ABChernic : IFocusSip
  object,
  uuid(9A1199F0-327A-4952-996B-A4552F0E7C8C),
  dual,
  nonextensible,
  helpstring("IFocusSip 接口"),
  pointer_default(unique)
]
interface IFocusSip : IDispatch{
  [id(1),  helpstring("method aboutbox")]           HRESULT aboutbox (
      [out,retval]      Fs__Str                 *ret);

  [id(2),  helpstring("method app_construct")]      HRESULT app_construct (
      [out,retval]      Fs_Stat                 *retStatus);

  [id(3),  helpstring("method app_destroy")]        HRESULT app_destroy (
      [out,retval]      Fs_Stat                 *retStatus);

  // {
  [id(4),  helpstring("method app_create")]         HRESULT app_create (
      [out,retval]      Fs_Stat                 *retStatus);

  [id(5),  helpstring("method app_init")]           HRESULT app_init (
      [out,retval]      Fs_Stat                 *retStatus);

  [id(6),  helpstring("method app_start")]          HRESULT app_start (
      [out,retval]      Fs_Stat                 *retStatus);

  [id(7),  helpstring("method app_default_config")] HRESULT app_default_config (
      [out,retval]      Fs_Stat                 *retStatus);

  [id(8),  helpstring("method app_test_config")]    HRESULT app_test_config (
      [out,retval]      Fs_Stat                 *retStatus);
  // }

  [id(101), helpstring("method acc_get_count")]     HRESULT acc_get_count(
    [out,retval]        Fs_Numb                 *pCount);

  [id(102), helpstring("method acc_get_info")]      HRESULT acc_get_info(
    [in]                Fs_Numb                 acc_id,
    [out]               Focusip_Acc_Info        *pInfo,
    [out,retval]        Fs_Stat                 *retStatus);

  [id(103), helpstring("method acc_add_short")]     HRESULT acc_add_short(
    [in]                Focusip_Acc_Config      *pconfig,
    [out,retval]        Fs_Stat                 *retStatus);

  [id(104), helpstring("method acc_add")]           HRESULT acc_add(
    //[in] int  _00accountId,
    [in]                Fs__Str                 _01label,
    [in]                Fs__Str                 _02server,
    [in]                Fs__Str                 _03proxy,
    [in]                Fs__Str                 _04username,
    [in]                Fs__Str                 _05domain,
    [in]                Fs_Numb                 _06port,
    [in]                Fs__Str                 _07authID,
    [in]                Fs__Str                 _08password,
    [in]                Fs_Numb                 _09rememberPassword,
    [in]                Fs__Str                 _10displayName,
    [in]                Fs__Str                 _11voicemailNumber,
    [in]                Fs__Str                 _12srtp,
    [in]                Fs__Str                 _13transport,
    [in]                Fs__Str                 _14publicAddr,
    [in]                Fs_Numb                 _15publish,
    [in]                Fs_Numb                 _16ice,
    [in]                Fs_Numb                 _17allowRewrite,
    [in]                Fs_Numb                 _18disableSessionTimer,
    [out]               Fs_Stat                 *retStatus,
    [out, retval]       Fs_Numb                 *pAcc_Index);

  [id(105), helpstring("method acc_set_online_status")] HRESULT acc_set_online_status(
    [in]                Fs_Numb                 acc_id,
    [in]                Fs_Numb                 is_online,
    [out,retval]        Fs_Stat                 *retStatus);

  [id(106), helpstring("method acc_set_registration")] HRESULT acc_set_registration(
    [in]                Fs_Numb                 acc_id,
    [in]                Fs_Numb                 reg_active,
    [out,retval]        Fs_Stat                 *retStatus);

  [id(107), helpstring("method acc_del")] HRESULT acc_del(
    [in]                Fs_Numb                 acc_id,
    [out,retval]        Fs_Stat                 *retStatus);

    //// 2222222-2222222-2222222
    [id(201), helpstring("method call_get_max_count")] HRESULT call_get_max_count(
        [out,retval]    Fs_Numb                 *retCount);

    [id(202), helpstring("method call_get_count")] HRESULT call_get_count(
        [out,retval]    Fs_Numb                 *retCount);

    //(via pjsua OK)
    [id(203), helpstring("method call_is_active")] HRESULT call_is_active(
        [in]            Fs_Numb                 callIndex, 
        [out,retval]    Fs_Bool                 *pRet);

    //(via pjsua OK)
    [id(204), helpstring("method call_has_media")] HRESULT call_has_media(
        [in]            Fs_Numb                 callIndex,
        [out,retval]    Fs_Bool                 *pRet);

    [id(205), helpstring("method call_get_info")] HRESULT call_get_info(
        [in]            Fs_Numb                 callIndex,
        [out]           Focusip_Call_Info       *pInfo,
        [out,retval]    Fs_Stat                 *retStatus);


    [id(211), helpstring("method call_make_call_short")] HRESULT call_make_call_short(
        [in]            Fs__Str                 Uri,
        [in]            Fs_Numb                 hasVideo,
        [out,retval]    Fs_Numb                 *RetCallID);

    [id(212), helpstring("method call_make_call")] HRESULT call_make_call(
        [in]            Fs__Str                 _21callId,
        [in]            Fs__Str                 _22numb,
        [in]            Fs__Str                 _23number,
        [in]            Fs__Str                 _24Para,
        [in]            Fs__Str                 _25name,
        [in]            Fs_Numb                 hasVideo,
        [out,retval]    Fs_Numb                 *RetCallID);

    [id(213), helpstring("method call_answer")] HRESULT call_answer(
        [in]            Fs_Numb                 callIndex,
        [in]            Fs_Numb                 status_code,
        [out,retval]    Fs_Stat                 *retStatus);


    [id(214), helpstring("method call_hangup")] HRESULT call_hangup(
        [in]            Fs_Numb                 callIndex,
        [in]            Fs_Numb                 code,
        [in]            Fs__Str                 reason,
        [out,retval]    Fs_Stat                 *retStatus);

    [id(215), helpstring("method call_hangup_all")] HRESULT call_hangup_all();

    [id(216), helpstring("method call_set_hold")] HRESULT call_set_hold(
        [in]            Fs_Numb                 callIndex,
        [out,retval]    Fs_Stat                 *retStatus);

    [id(217), helpstring("method call_release_hold")] HRESULT call_release_hold(
        [in]            Fs_Numb                 callIndex,
        [out,retval]    Fs_Stat                 *retStatus);

/*
    [id(218), helpstring("method call_xfer")] HRESULT call_xfer(
        [in]            Fs_Numb                 callIndex,
        [in,string]     Pj_String               dst_uri,
        [out,retval]    Fs_Stat                 *retStatus);
*/

    //// 3333333-3333333-3333333
    [id(301), helpstring("method vid_win_set_overlay_mode")] HRESULT vid_win_set_overlay_mode(
        [in]            Fs_Numb                 mode,
        [out,retval]    Fs_Stat                 *retStatus);

    [id(302), helpstring("method vid_win_resize")] HRESULT vid_win_resize(
        [in]            Fs_Doub                 present,
        [out,retval]    Fs_Stat                 *retStatus);

};

[ // ABChernic : FocusSipAtlLib
  uuid(E376B48B-83F4-4739-A258-993BD0BD9057),
  version(1.0),
  helpstring("FocusSipAtlLib 1.0 类型库"),
  custom(a817e7a1-43fa-11d0-9e44-00aa00b6770a,"{194F9248-F190-4BF8-ADAD-6ED35F0B919D}")
]
library FocusSipAtlLib{
    importlib("stdole32.tlb");
    importlib("stdole2.tlb");

    struct Focusip_Cred_Info;
    struct Focusip_Acc_Config;
    struct Focusip_Config;
    struct Focusip_Call_Info;
    struct Focusip_Buddy_Info;
    struct Focusip_Acc_Info;
    struct Focusip_Conf_Port_Info;

    //Chernic: COM 注册类
    [
        uuid(194F9248-F190-4BF8-ADAD-6ED35F0B919D),
        helpstring("ComponentRegistrar 类")
    ]
    coclass CompReg
    {
        [default] interface IComponentRegistrar;
    };

    //Chernic: 回调函数
    [
      uuid(DC91CBCE-4B9E-4369-80B9-39341EEFD814),
      helpstring("_IVideoAgentEvents Interface")
    ]
    dispinterface _IVideoAgentEvents
    {
        properties:
        methods:
        // ABChernic
        [id(1), helpstring("method OnRegState")]
            void OnRegState         ([in] int acc_id);

        [id(2), helpstring("method OnCallState")]
            void OnCallState        ([in] int callIndex, [in] Focusip_Call_Info *cInfo);

        [id(3), helpstring("method OnBuddcyState")]
            void OnBuddyState       ([in] int buddy_index);

        [id(4), helpstring("method OnIncomingPager")]
            void OnIncomingPager    ([in] int callIndex, [in] BSTR fromUri, [in] BSTR toURI, [in] BSTR pagerText);

        [id(5), helpstring("method OnIncomingCall")]
            void OnIncomingCall     ([in] int callIndex);
        
        [id(6), helpstring("method OnTypingIndication")] // TI = TypingIndication
            // void OnTypingIndication ([in] int callIndex, [in] BSTR fromUri, [in] BSTR toURI, [in] int isTyping);
            void OnTypingIndication ([in] int callIndex, [in] Focusip_TI_Info *tiInfo);
		
	};
            
    // ABChernic : FocusSip 
    [
        uuid(15E1E788-3086-4B54-83C0-449EF56CD4EE),
        control,
        helpstring("FocusSip Class")
    ]
    coclass FocusSip
    {
        [default] interface IFocusSip;
        [default, source] dispinterface _IVideoAgentEvents;
    };


};
